########################
### GLOBAL CONSTANTS ###
########################

ARPABET_VOWELS = set(['AA', 'AE', 'AH', 'AO', 'AW', 'AX', 'AXR', 'AY', 'EH', 'ER', 'EY', 'IH', 'IX', 'IY', 'OW', 'OY', 'UH', 'UW', 'UX'])
ARPABET_CONSONANTS = set(['B', 'CH', 'D', 'DH', 'DX', 'EL', 'EM', 'EN', 'F', 'G', 'H', 'HH', 'JH', 'K', 'L', 'M', 'N', 'NG', 'NX', 'P', 'Q', 'R', 'S', 'SH', 'T', 'TH', 'V', 'W', 'WH', 'Y', 'Z', 'ZH'])

ARPABET_DIPHTHONGS = set(['AW', 'AY', 'EY', 'OW', 'OY'])
ARPABET_RHOTICS = set(['ER'])

MAX_PORTMANTEAUS = 50
MAX_RHYMES = 50
MAX_NEIGHBORS = 100
TEST_LIMIT = 20000
TEST_INPUT = 'dog hotel'

# All non-consonent ARPABET characters have an associated stress (either 0,1,2), so always add an extra bit to track this:
# 0 (none) --> 0, 1 (primary) --> 4, 2 (secondary) --> 2
# All consonants are implicitly unstressed (bit=0)
#
# For all diphthong's, treat the second vowel sound as having no stress, to avoid double-penalizing when the stresses don't match

ARPABET_PHONE_TO_PHONOLOGICAL_PHONE_DICT = {
    'AA0': ['AA0'],
    'AA1': ['AA1'],
    'AA2': ['AA2'],

    'AE0': ['AE0'],
    'AE1': ['AE1'],
    'AE2': ['AE2'],

    'AH0': ['AH0'],
    'AH1': ['AH1'],
    'AH2': ['AH2'],

    'AO0': ['AO0'],
    'AO1': ['AO1'],
    'AO2': ['AO2'],

    'AW0': ['AA0', 'UH0'], # diphthong
    'AW1': ['AA1', 'UH0'], # diphthong
    'AW2': ['AA2', 'UH0'], # diphthong

    'AY0': ['AA0', 'IH0'], # diphthong
    'AY1': ['AA1', 'IH0'], # diphthong
    'AY2': ['AA2', 'IH0'], # diphthong

    'B': ['B'],
    'CH': ['CH'],
    'D': ['D'],
    'DH': ['DH'],

    'EH0': ['EH0'],
    'EH1': ['EH1'],
    'EH2': ['EH2'],

    'ER0': ['AO0', 'R'], # rhotic; 'EH' instead of 'AO'?
    'ER1': ['AO1', 'R'], # rhotic; 'EH' instead of 'AO'?
    'ER2': ['AO2', 'R'], # rhotic; 'EH' instead of 'AO'?

    'EY0': ['e0', 'IH0'], # diphthong
    'EY1': ['e1', 'IH0'], # diphthong
    'EY2': ['e2', 'IH0'], # diphthong

    'F': ['F'],
    'G': ['G'],
    'HH': ['HH'],

    'IH0': ['IH0'],
    'IH1': ['IH1'],
    'IH2': ['IH2'],

    'IY0': ['IY0'],
    'IY1': ['IY1'],
    'IY2': ['IY2'],

    'JH': ['JH'],
    'K': ['K'],
    'L': ['L'],
    'M': ['M'],
    'N': ['N'],
    'NG': ['NG'],

    'OW0': ['o0', 'UH0'], # diphthong
    'OW1': ['o1', 'UH0'], # diphthong
    'OW2': ['o2', 'UH0'], # diphthong

    'OY0': ['AO0', 'IH0'], # diphthong
    'OY1': ['AO1', 'IH0'], # diphthong
    'OY2': ['AO2', 'IH0'], # diphthong

    'P': ['P'],
    'R': ['R'],
    'S': ['S'],
    'SH': ['SH'],
    'T': ['T'],
    'TH': ['TH'],
    
    'UH0': ['UH0'],
    'UH1': ['UH1'],
    'UH2': ['UH2'],

    'UW0': ['UW0'],
    'UW1': ['UW1'],
    'UW2': ['UW2'],

    'V': ['V'],
    'W': ['W'],
    'Y': ['Y'],
    'Z': ['Z'],
    'ZH': ['ZH'],
}

PHONOLOGICAL_PHONE_TO_PHONOLOGICAL_FEATURE_DICT = {
    'AA0': [-1,1,1,1,-1,-1,0,0,1,-1,1,-1,-1,1,-1,1,-1,-1,1,-1,-1,-1,-1,0], # variant
    'AA1': [-1,1,1,1,-1,-1,0,0,1,-1,1,-1,-1,1,-1,1,-1,-1,1,-1,-1,-1,-1,4], # variant
    'AA2': [-1,1,1,1,-1,-1,0,0,1,-1,1,-1,-1,1,-1,1,-1,-1,1,-1,-1,-1,-1,2], # variant

    'AE0': [-1,1,1,1,-1,-1,0,0,1,-1,1,-1,1,1,-1,1,-1,-1,1,-1,-1,-1,-1,0],
    'AE1': [-1,1,1,1,-1,-1,0,0,1,-1,1,-1,1,1,-1,1,-1,-1,1,-1,-1,-1,-1,4],
    'AE2': [-1,1,1,1,-1,-1,0,0,1,-1,1,-1,1,1,-1,1,-1,-1,1,-1,-1,-1,-1,2],

    'AH0': [-1,1,1,1,1,-1,0,0,1,1,-1,1,-1,1,-1,1,-1,-1,1,-1,-1,-1,-1,0], # treat as UH rather than AO
    'AH1': [-1,1,1,1,1,-1,0,0,1,1,-1,1,-1,1,-1,1,-1,-1,1,-1,-1,-1,-1,4], # treat as UH rather than AO
    'AH2': [-1,1,1,1,1,-1,0,0,1,1,-1,1,-1,1,-1,1,-1,-1,1,-1,-1,-1,-1,2], # treat as UH rather than AO

    'AO0': [-1,1,1,1,1,-1,0,0,1,-1,-1,1,-1,1,-1,1,-1,-1,1,-1,-1,-1,-1,0],
    'AO1': [-1,1,1,1,1,-1,0,0,1,-1,-1,1,-1,1,-1,1,-1,-1,1,-1,-1,-1,-1,4],
    'AO2': [-1,1,1,1,1,-1,0,0,1,-1,-1,1,-1,1,-1,1,-1,-1,1,-1,-1,-1,-1,2],

    'B': [1,-1,-1,1,-1,-1,0,0,-1,0,0,0,0,-1,0,1,-1,-1,-1,-1,-1,-1,-1,0],
    'CH': [1,-1,-1,-1,0,1,-1,1,1,1,-1,-1,-1,-1,0,-1,-1,-1,0,1,-1,1,-1,0],
    'D': [1,-1,-1,-1,0,1,1,-1,-1,0,0,0,0,-1,0,1,-1,-1,-1,-1,-1,-1,-1,0],
    'DH': [1,-1,-1,-1,0,1,1,-1,-1,0,0,0,0,-1,0,1,-1,-1,1,-1,-1,-1,-1,0],

    'EH0': [-1,1,1,1,-1,-1,0,0,1,-1,-1,-1,-1,1,-1,1,-1,-1,1,-1,-1,-1,-1,0],
    'EH1': [-1,1,1,1,-1,-1,0,0,1,-1,-1,-1,-1,1,-1,1,-1,-1,1,-1,-1,-1,-1,4],
    'EH2': [-1,1,1,1,-1,-1,0,0,1,-1,-1,-1,-1,1,-1,1,-1,-1,1,-1,-1,-1,-1,2],

    'e0': [-1,1,1,1,-1,-1,0,0,1,-1,-1,-1,1,1,1,1,-1,-1,1,-1,-1,-1,-1,0],
    'e1': [-1,1,1,1,-1,-1,0,0,1,-1,-1,-1,1,1,1,1,-1,-1,1,-1,-1,-1,-1,4],
    'e2': [-1,1,1,1,-1,-1,0,0,1,-1,-1,-1,1,1,1,1,-1,-1,1,-1,-1,-1,-1,2],

    'F': [1,-1,-1,1,-1,-1,0,0,-1,0,0,0,0,-1,0,-1,-1,-1,1,1,-1,-1,-1,0],
    'G': [1,-1,-1,-1,0,-1,0,0,1,1,-1,1,-1,-1,0,1,-1,-1,-1,-1,-1,-1,-1,0],
    'HH': [-1,-1,-1,-1,0,-1,0,0,-1,0,0,0,0,-1,0,-1,1,-1,1,-1,-1,-1,-1,0],

    'IH0': [-1,1,1,1,-1,-1,0,0,1,1,-1,-1,-1,1,-1,1,-1,-1,1,-1,-1,-1,-1,0],
    'IH1': [-1,1,1,1,-1,-1,0,0,1,1,-1,-1,-1,1,-1,1,-1,-1,1,-1,-1,-1,-1,4],
    'IH2': [-1,1,1,1,-1,-1,0,0,1,1,-1,-1,-1,1,-1,1,-1,-1,1,-1,-1,-1,-1,2],

    'IY0': [-1,1,1,1,-1,-1,0,0,1,1,-1,-1,1,1,1,1,-1,-1,1,-1,-1,-1,-1,0],
    'IY1': [-1,1,1,1,-1,-1,0,0,1,1,-1,-1,1,1,1,1,-1,-1,1,-1,-1,-1,-1,4],
    'IY2': [-1,1,1,1,-1,-1,0,0,1,1,-1,-1,1,1,1,1,-1,-1,1,-1,-1,-1,-1,2],

    'JH': [1,-1,-1,-1,0,1,-1,1,1,1,-1,-1,-1,-1,0,1,-1,-1,0,1,-1,1,-1,0],
    'K': [1,-1,-1,-1,0,-1,0,0,1,1,-1,1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,0],
    'L': [1,1,-1,-1,0,1,1,-1,-1,0,0,0,0,-1,0,1,-1,-1,1,-1,1,-1,-1,0],
    'M': [1,1,-1,1,-1,-1,0,0,-1,0,0,0,0,-1,0,1,-1,-1,-1,-1,-1,-1,1,0],
    'N': [1,1,-1,-1,0,1,1,-1,-1,0,0,0,0,-1,0,1,-1,-1,-1,-1,-1,-1,1,0],
    'NG': [1,1,-1,-1,0,-1,0,0,1,1,-1,1,-1,-1,0,1,-1,-1,-1,-1,-1,-1,1,0],

    'o0': [-1,1,1,1,1,-1,0,0,1,-1,-1,1,1,1,1,1,-1,-1,1,-1,-1,-1,-1,0],
    'o1': [-1,1,1,1,1,-1,0,0,1,-1,-1,1,1,1,1,1,-1,-1,1,-1,-1,-1,-1,4],
    'o2': [-1,1,1,1,1,-1,0,0,1,-1,-1,1,1,1,1,1,-1,-1,1,-1,-1,-1,-1,2],

    'P': [1,-1,-1,1,-1,-1,0,0,-1,0,0,0,0,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,0],
    'R': [1,1,-1,-1,0,1,1,-1,-1,0,0,0,0,-1,0,1,-1,-1,1,-1,-1,-1,-1,0],
    'S': [1,-1,-1,-1,0,1,1,-1,-1,0,0,0,0,-1,0,-1,-1,-1,1,1,-1,-1,-1,0],
    'SH': [1,-1,-1,-1,0,1,-1,1,-1,0,0,0,0,-1,0,-1,-1,-1,1,-1,-1,-1,-1,0],
    'T': [1,-1,-1,-1,0,1,1,-1,-1,0,0,0,0,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,0],
    'TH': [1,-1,-1,-1,0,1,1,-1,-1,0,0,0,0,-1,0,-1,-1,-1,1,-1,-1,-1,-1,0],

    'UH0': [-1,1,1,1,1,-1,0,0,1,1,-1,1,-1,1,-1,1,-1,-1,1,-1,-1,-1,-1,0],
    'UH1': [-1,1,1,1,1,-1,0,0,1,1,-1,1,-1,1,-1,1,-1,-1,1,-1,-1,-1,-1,4],
    'UH2': [-1,1,1,1,1,-1,0,0,1,1,-1,1,-1,1,-1,1,-1,-1,1,-1,-1,-1,-1,2],

    'UW0': [-1,1,1,1,1,-1,0,0,1,1,-1,1,1,1,1,1,-1,-1,1,-1,-1,-1,-1,0],
    'UW1': [-1,1,1,1,1,-1,0,0,1,1,-1,1,1,1,1,1,-1,-1,1,-1,-1,-1,-1,4],
    'UW2': [-1,1,1,1,1,-1,0,0,1,1,-1,1,1,1,1,1,-1,-1,1,-1,-1,-1,-1,2],

    'V': [1,-1,-1,1,-1,-1,0,0,-1,0,0,0,0,-1,0,1,-1,-1,1,1,-1,-1,-1,0],
    'W': [-1,1,-1,1,1,-1,0,0,1,1,-1,1,-1,-1,0,1,-1,-1,1,-1,-1,-1,-1,0],
    'Y': [-1,1,-1,1,-1,-1,0,0,1,1,-1,-1,-1,-1,0,1,-1,-1,1,-1,-1,-1,-1,0],
    'Z': [1,-1,-1,-1,0,1,1,-1,-1,0,0,0,0,-1,0,1,-1,-1,1,1,-1,-1,-1,0],
    'ZH': [1,-1,-1,-1,0,1,-1,1,-1,0,0,0,0,-1,0,1,-1,-1,1,-1,-1,-1,-1,0],
}